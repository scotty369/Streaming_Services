```{python}
import pandas as pd
import polars as pl
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, classification_report
import numpy as np
from datetime import datetime
from sklearn.feature_extraction.text import TfidfVectorizer
from scipy.sparse import hstack

# Load datasets
disney = pl.read_csv("/Users/scotttow123/Documents/Streaming_Services/Data/disney_plus_titles.csv").to_pandas()
hulu = pl.read_csv("/Users/scotttow123/Documents/Streaming_Services/Data/hulu_titles.csv").to_pandas()
netflix = pl.read_csv("/Users/scotttow123/Documents/Streaming_Services/Data/netflix_titles.csv").to_pandas()
prime = pd.read_csv("/Users/scotttow123/Documents/Streaming_Services/Data/amazon_prime_titles.csv")

# Add platform column
disney['platform'] = 'Disney+'
hulu['platform'] = 'Hulu'
netflix['platform'] = 'Netflix'
prime['platform'] = 'Amazon Prime'

# Combine datasets
df = pd.concat([disney, hulu, netflix, prime], ignore_index=True)

# Handle missing values
df.fillna("Unknown", inplace=True)

# Extract numeric duration
def extract_duration(value):
    if "Season" in value:
        return int(value.split(" ")[0])
    elif "min" in value:
        return int(value.split(" ")[0])
    return 0

df['duration'] = df['duration'].apply(extract_duration)

# Extract date features
df['date_added'] = df['date_added'].replace("Unknown", np.nan)
df['date_added'] = pd.to_datetime(df['date_added'], errors='coerce')
df['year_added'] = df['date_added'].dt.year.fillna(0).astype(int)
df['month_added'] = df['date_added'].dt.month.fillna(0).astype(int)

# Encode categorical features
label_enc = LabelEncoder()
df['platform'] = label_enc.fit_transform(df['platform'])
df['type'] = label_enc.fit_transform(df['type'])
df['rating'] = label_enc.fit_transform(df['rating'])
df['listed_in'] = label_enc.fit_transform(df['listed_in'])

# One-hot encode country
onehot_enc = OneHotEncoder(handle_unknown='ignore')
country_encoded = onehot_enc.fit_transform(df[['country']])

# TF-IDF vectorization on description
tfidf = TfidfVectorizer(max_features=500)
description_features = tfidf.fit_transform(df['description'])

# Combine features
X_numerical = df[['type', 'release_year', 'rating', 'listed_in', 'duration', 'year_added', 'month_added']]
X = hstack([X_numerical, country_encoded, description_features])
y = df['platform']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = XGBClassifier(use_label_encoder=False, eval_metric='mlogloss', n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print(classification_report(y_test, y_pred))

```

```{python}

```

```{python}

```

```{python}


```

```{python}


```

```{python}


```

```{python}
```

```{python}
```

```{python}
```

```{python}
```

```{python}
```

```{python}
```

```{python}
```

